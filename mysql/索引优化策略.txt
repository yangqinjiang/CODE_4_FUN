索引优化策略

1,索引列上不能使用表达式或者函数
select ... from product where to_days(out_date) - to_days(current_date) <= 30

改进
select ... from product where out_date <= data_add(current_date, interval 30 day)

2,前缀索引和索引列的选择性
CREATE INDEX index_name ON table(col_name(n));

索引的选择性是不重复的索引值和表的记录数的比值

3，联合索引
如何选择索引列的顺序？
	a,经常会被使用到的列优先
	b,选择性高的列优先
	c, 宽度小的列优先

4，覆盖索引
优点
	a,可以优化缓存，减少磁盘IO操作
	b,可以减少随机IO,变随机IO操作变为顺序IO操作
	c,可以避免对innodb主键索引的二次查询
	d,可以避免myisam表进行系统调用
无法使用覆盖索引的情况
	a,存储引擎不支持覆盖索引，hash索引不支持
	b,查询中使用了太多的列，例如select * ...
	c,使用了双%号的like查询 



使用索引来优化查询
使用索引 扫描来优化排序
 a,索引的列顺序和order by子句的顺序完全一致
 b,索引中所有列的方向（升序，降序）和order by 子句完全一致
 c, order by 中的字段全部在关联表中的第一张表中

模拟hash索引优化查询
 a,只能处理键值的全值匹配查找
 b,所使用的hash函数决定着索引键的大小



 利用索引优化锁
  索引可以减少锁定的行数
  索引可以加快处理速度，同时也加快了锁的释放 